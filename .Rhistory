attributes(m)
m <- 1:10
dim(m) <- c(2,5)
m
x <- 1:3
y<-10:12
cbind(x,y)
rbind(x,y)
x <- factor(c('yes','yes','no','yes','no'))
x
table(x)
table(x)
unclass(x)
table(x)
unclass(x)
x <- factor(c('yes','yes','no','yes','no'),
levels = c('yes','no'))
x
x <- 1
class(x)
x <- c(4, "a", TRUE)
class(x)
x <- 1:3
y<-10:12
rbind(x,y)
class(rbind(x,y))
x <- list(2, "a", "b", TRUE)
x[[2]]
class(x[[2]])
x <- 1:4 , y <- 2:3
x <- 1:4
y <- 2:3
x+y
class(x+y)
x <- c(3, 5, 1, 10, 12, 6)
x[x<6]==0
x[x==0]<6
install.packages("swirl")
packageVersion("swirl")
library(swirl)
install_from_swirl("R Programming")
for(i in 1:10){
print(i)
}
x<- matrix(1:6,2,3)
for(i in seq_long(nrow(x))){
for(j in seq_along(ncol(x))){
print(x[i,j])
}
}
x<- matrix(1:6,2,3)
for(i in seq_along(nrow(x))){
for(j in seq_along(ncol(x))){
print(x[i,j])
}
}
x<- matrix(1:6,2,3)
for(i in seq_along(nrow(x))){
for(j in seq_along(ncol(x))){
print(x[i,j])
}
}
add2 <- function(x,y){
x+y
}
add2(10,5)
above10<-function(x){
use<- x > 10
x[use]
}
above <- function(x,n){
use <- x>n
x[use]
}
x <- 1:20
above(x,11)
columnmean <- function(y){
ncolumns <- ncol(y)
means <- numeric(nc)
for(i in 1:nc){
means[i]<- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y){
ncolumns <- ncol(y)
means <- numeric(ncolumns)
for(i in 1:nc){
means[i]<- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y){
ncolumns <- ncol(y)
means <- numeric(ncolumns)
for(i in 1:ncolumns){
means[i]<- mean(y[,i])
}
means
}
columnmean(airquality)
columnmean <- function(y, removeNA = TRUE){
ncolumns <- ncol(y)
means <- numeric(ncolumns)
for(i in 1:ncolumns){
means[i]<- mean(y[,i], na.rm = removeNA)
}
means
}
columnmean(airquality)
cube <- function(x, n) {
x^3
}
cube(3)
x <- 1:10
if(x > 5) {
x <- 0
}
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y <- if(x < 3) {
NA
} else {
10
}
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
install.packages("rlist")
library(matlib)
solve(matrix(c(1,0,0,0,1,0,0,0,2)))
solve(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
makeCacheMatrix <- function(x = matrix()) {
if (det(x) != 0){
inverse_matrix  <- inv(x)
}
else{
print("IS NOT SQUARE")
}
return (inverse_matrix)
}
cacheSolve <- function(x, ...) {
x <- solve(x)
inverse_matrix  <- inv(x)
}
cacheSolve <- function(x, ...) {
x <- solve(x)
original_matrix  <- inv(x)
return(original_matrix)
}
results < - makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
cacheSolve(results)
results < - makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
makeCacheMatrix <- function(x) {
if (det(x) != 0){
inverse_matrix  <- inv(x)
}
else{
print("IS NOT SQUARE")
}
return (inverse_matrix)
}
makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3)
inv(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
library(matlib)
install.packages("matlib")
makeCacheMatrix <- function(x) {
if (det(x) != 0){
inverse_matrix  <- inv(x)
}
else{
print("Matrix not invertible and square")
}
return (inverse_matrix)
}
cacheSolve <- function(x, ...) {
x <- solve(x)
original_matrix  <- inv(x)
return(original_matrix)
}
makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
library(matlib)
makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
cacheSolve(results)
results<- makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
cacheSolve(results)
results$getinverse()
makeCacheMatrix <- function(x = matrix()) {
if (det(x) != 0){
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(i) m <<- solve(x)
getInverse <- function() m
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
else{
print("Matrix not invertible and square")
}
}
results<- makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
results$getinverse()
makeCacheMatrix <- function() {
if (det(x) != 0){
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(i) m <<- solve(x)
getInverse <- function() m
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
else{
print("Matrix not invertible and square")
}
}
results<- makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
makeCacheMatrix <- function(x) {
if (det(x) != 0){
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(i) m <<- solve(x)
getInverse <- function() m
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
else{
print("Matrix not invertible and square")
}
}
results<- makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
results$getinverse()
results
makeCacheMatrix <- function(x) {
if (det(x) != 0){
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(i) m <<- inv(x)
getInverse <- function() m
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
else{
print("Matrix not invertible and square")
}
}
results<- makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
cacheSolve(results)
results
makeCacheMatrix <- function(x = matrix()) {
if (det(x) != 0){
m <- NULL
set <- function(y)
{
x <<- y
m <<- NULL
}
get <- function() x
setInverse <- function(i) m <<- inv(x)
getInverse <- function() m
list(set = set, get = get, setInverse = setInverse, getInverse = getInverse)
}
else{
print("Matrix not invertible and square")
}
}
results<- makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
cacheSolve(results)
cacheSolve <- function(x, ...) {
m <- x$getInverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setInverse(m)
m
}
results<- makeCacheMatrix(matrix(c(1,0,0,0,1,0,0,0,2),ncol=3,nrow=3))
cacheSolve(results)
resultsx x$get()
results$get()
results$x$getinverse(
results$getinverse(
results$getinverse()
results$getInverse()
ucscDb <- dbConnect(MySQL(), user='genome',
host='genome-mysql.cse.ucsc.edu')
library(RMySQL)
install.packages('RMySQL')
library(RMySQL)
ucscDb <- dbConnect(MySQL(), user='genome',
host='genome-mysql.cse.ucsc.edu')
result <- dbGetQuery(ucscDb,'show database;');dbDisconnect(ucscDb)
dbDisconnect(ucscDb)
ucscDb <- dbConnect(MySQL(), user='genome',
host='genome-mysql.cse.ucsc.edu')
result <- dbGetQuery(ucscDb,'SHOW DATABASES')
dbDisconnect(ucscDb)
result
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")# htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
library(httr)
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")# htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
connection <- url("http://biostat.jhsph.edu/~jleek/contact.html")
htmlCode <- readLines(connection)
close(connection)
c(nchar(htmlCode[10]), nchar(htmlCode[20]), nchar(htmlCode[30]), nchar(htmlCode[100]))
if(!file.exists('./data')){dir.create('./data')}
fileUrl <- 'https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?acessType=DOWNLOAD'
download.file(fileUrl,destfile='./data/restaurants.csv', method = 'curl')
restData <- read.csv('./data/restaurants.csv')
head(restData, n=3)
tail(restData, n=3)
summary(restData)
quantile(restData$councilDistrict, na.rm = TRUE)
table(restData$zipCode %n% c('21212'))
library(dplyr)
options(width = 105)
chicago <- readRDS('chocago.rds')
chicago <- readRDS('chicago.rds')
chicago <- readRDS('chicago.RDS')
fileUrl <- 'https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv'
QuizzData <- read.csv(fileUrl)
which(QuizzData)
head(QuizzData)
strsplit(QuizzData$WGTP)
strsplit(QuizzData ,split = QuizzData$WGTP)
strsplit(QuizzData ,split= 'wgtp')
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
library(quantmod)
x <- rnorm(100)
hist(x)
y<- rnorm(100)
plot(x,y)
par(mar = c(2,2,2,2))
plot(x,y)
plot(x, y, pch = 20)
title('Scatterplot')
text(-2, -2, 'label')
legend('topleft')
legend(legend = 'topleft')
title('Scatterplot')
text(-2, -2, 'label')
legend('topleft')
legend('topleft'n legend = 'Data')
legend('topleft',legend = 'Data')
legend('topleft',legend = 'Data', pch = 20)
fit <- lm(x, y)
abline(fit)
fit <- lm(x ~ y)
abline(fit)
abline(fit, lwd = 3, col = 'red')
plot(x, y, xlab = 'altura', ylab = 'peso', main = 'Scatterplot',
phc = 20)
plot(x, y, xlab = 'altura', ylab = 'peso', main = 'Scatterplot',
phc = 20)
plot(x, y, xlab = 'altura', ylab = 'peso', main = 'Scatterplot',
pch = 20)
par(mar = c(4,4,4,4))
par(mar = c(6,6,6,6))
legend("topright", data = 'Data', pch = 20)
fit <- lm (x ~ y)
abline(fit, pch = 20, col = 'red')
abline(fit, lwd = 20, col = 'red')
abline(fit, lwd = 4, col = 'red')
legend("topright", data = 'Data', pch = 20)
fit <- lm (x ~ y)
abline(fit, lwd = 4, col = 'red')
plot(x, y, xlab = 'altura', ylab = 'peso', main = 'Scatterplot',
pch = 20)
par(mar = c(6,6,6,6))
legend("topright", data = 'Data', pch = 20)
fit <- lm (x ~ y)
abline(fit, lwd = 4, col = 'red')
z <- rpois(100, 2)
par(mfrow = c(2,1))
plot(x, y, pch = 20)
plot(x, z, pch = 19)
x <- rnorm(100)
y <- x = rnorm(100)
g <- gl(2, 50, labels = c('Male', 'Female'))
## cria o grafico mais não plota nada
plot(x, y, type = 'n')
points(x[g == 'Male'], y[g == 'Male'], col = 'green')
points(x[g == 'Female'], y[g == 'Female'], col = 'blue')
par(mfrow = c(1,1))
x <- rnorm(100)
y <- x = rnorm(100)
g <- gl(2, 50, labels = c('Male', 'Female'))
## cria o grafico mais não plota nada
plot(x, y, type = 'n')
points(x[g == 'Male'], y[g == 'Male'], col = 'green')
points(x[g == 'Female'], y[g == 'Female'], col = 'blue')
par(mfrow = c(1,1))
x <- rnorm(100)
y <- x + rnorm(100)
g <- gl(2, 50, labels = c('Male', 'Female'))
## cria o grafico mais não plota nada
plot(x, y, type = 'n')
points(x[g == 'Male'], y[g == 'Male'], col = 'green')
points(x[g == 'Female'], y[g == 'Female'], col = 'blue')
?jpeg
?xfig
?windows
knitr::opts_chunk$set(echo = TRUE)
getwd('C:\Users\gabriel\Documents\Estudos\Coursera\Curso5\RepData_PeerAssessment1')
knitr::opts_chunk$set(echo = TRUE)
getwd('C:/Users/gabriel/Documents/Estudos/Coursera/Curso5/RepData_PeerAssessment1')
knitr::opts_chunk$set(echo = TRUE)
setwd('C:/Users/gabriel/Documents/Estudos/Coursera/Curso5/RepData_PeerAssessment1')
getwd()
df_activity <- read.csv('..\activity\activity.csv)
df_activity <- read.csv('../activity/activity.csv')
df_activity <- read.csv('activity/activity.csv')
df_activity <- read.csv('activity/activity.csv')
df_activity <- read.csv('activity/activity.csv')
head(df_activity)
df_activity <- read.csv('activity/activity.csv')
df_activity$date <- as.Date(df_activity$date, tryFormats = "%Y-%m-%d")
head(df_activity)
library(dplyr)
activity_mean %>%
mutate(day = format(date, "%d"), year = format(date, "%Y")) %>%
group_by(day, year) %>%
summarise(total = mean(value))
library(dplyr)
df_activity %>%
mutate(day = format(date, "%d"), year = format(date, "%Y")) %>%
group_by(day, year) %>%
summarise(total = mean(value))
library(dplyr)
df_activity %>%
mutate(day = format(date, "%d"), year = format(date, "%Y")) %>%
group_by(day, year) %>%
summarise(total = mean(steps))
mean(df_activity)
library(dplyr)
df_activity %>%
mutate(day = format(date, "%d"), year = format(date, "%Y")) %>%
group_by(day) %>%
summarise(total = mean(steps))
mean(df_activity)
library(dplyr)
df_activity %>%
mutate(day = format(date, "%d"), year = format(date, "%Y")) %>%
group_by(day) %>%
summarise(total = mean(steps))
head(df_activity)
library(dplyr)
activity_day <- df_activity %>%
mutate(day = format(date, "%d"), year = format(date, "%Y")) %>%
group_by(day) %>%
summarise(total = mean(steps))
head(activity_day)
library(dplyr)
activity_day <- df_activity %>%
mutate(day = format(date, "%d"), year = format(date, "%Y")) %>%
group_by(day) %>%
summarise(total = mean(steps))
head(activity_day)
hist(activity_day)
library(dplyr)
activity_day <- df_activity %>%
mutate(day = format(date, "%d"), year = format(date, "%Y")) %>%
group_by(day) %>%
summarise(total = mean(steps))
head(activity_day)
hist(activity_day$total)
library(dplyr)
hist(df_activity$steps)
